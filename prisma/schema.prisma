// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  stakeKey      String?
  address       String?
  provider      String?
  nonce         String?
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/////////////////////////////////////////////////////

model Wallet {
  id            String         @id @default(cuid())
  userId        String
  address       String         @unique // Wallet address for staking
  stakeKey      String         @unique
  provider      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastChecked   DateTime? // Timestamp for last update/check
  totalEarnings Decimal? // Total tokens or rewards earned
  isActive      Boolean? // Indicates if staking is active
  user          User           @relation(fields: [userId], references: [id])
  walletRecords WalletRecord[] // Relation to WalletRecord model

  @@index([userId])
}

model WalletRecord {
  id       String   @id @default(cuid())
  walletId String
  date     DateTime // Date of staking activity
  earnings Decimal // Earnings for the day
  wallet   Wallet   @relation(fields: [walletId], references: [id])

  @@index([walletId])
}
